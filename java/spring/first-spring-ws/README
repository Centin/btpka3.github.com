Apache Axis2  : WS-I Basic Profile Version 1.0
Apache CXF    : WS-I Basic Profile 1.1
Spring-WS     : WS-I Basic Profile ???
ASP.NET       : WS-I Basic Profile Version 1.1
                WS-I Basic Security Profile 1.0
  http://msdn.microsoft.com/en-us/library/ms230196.aspx
  http://msdn.microsoft.com/en-us/library/vstudio/ms230196(v=vs.100).aspx

WS-I Basic Profile 1.1
  http://www.ws-i.org/Profiles/BasicProfile-1.1.html

Basic Security Profile Version 1.0
  http://www.ws-i.org/Profiles/BasicSecurityProfile-1.0.html

Attachments Profile Version 1.0
  http://www.ws-i.org/Profiles/AttachmentsProfile-1.0.html

Simple SOAP Binding Profile Version 1.0
  http://www.ws-i.org/Profiles/SimpleSoapBindingProfile-1.0.html

Discover SOAP encoding's impact on Web service performance
  http://www.ibm.com/developerworks/webservices/library/ws-soapenc/

Which style of WSDL should I use?
  https://www.ibm.com/developerworks/webservices/library/ws-whichwsdl/

  该文章很好的阐述了各种区别。
  最终结合性能考虑，使用 Document/literal 的方式。
  另外，在Eclipse中通过WSDL Editor编写WSDL文件时，在Apache CXF的 Maven
  插件 cxf-codegen-plugin 的帮助下，生成代码的规整时的WSDL应当：
1. 每个方法的各个 <wsdl:message> 的name属性分别为:
    request:  ${operationName}Request,
    response: ${operationName}Response,
    fault:    ${operationName}Fault,
2. 各个<wsdl:message>下面有且仅有一个<wsdl:part>
3. <wsdl:part>的name属性均保持 parameters 即可。
4. <wsdl:part>均使用 xsd:element，而不是xsd:type。xsd:element的name应当是:
    request:  ${operationName},
    response: ${operationName}Response,
    fault:    ${operationName}Fault,
  所有xsd:element都不要定义匿名的本地xsd:type，而是引用单独定义的类型，这样的话，这些类型就可以尽可能地被重用。
  在Apache CXF中，如果

 MyMath中示例   <wsdl:part>的引用方式                   生成的java代码现象
 add            匿名本地类型的xsd:element               接口声明的 fault为程序自动生成的有下划线的异常（ AddFault_Exception）
 minus          xsd:type(不要使用，WS-I Basic-profile不兼容)                               接口声明参数仅为一个（MinusType），返回值类型为封装类型（MinusResponseType）
 multiply       xsd:element -> 非匿名的本地xsd:type     接口声明的参数、返回值、异常类型均最简洁。





.Net (C#) and SOAP with Attachments
  http://blog.rueedlinger.ch/2009/01/net-c-and-soap-with-attachments/



MyMath.wsdl

生成自签名的证书、并导出证书

服务器端
keytool -genkeypair -alias myServer -keyalg RSA -keysize 1024 -sigalg SHA1withRSA -dname "CN=myServer, OU=R & D department, O=\"BJ SOS Software Tech Co., Ltd\", L=Beijing, S=Beijing, C=CN" -validity 3650 -keypass 123456 -keystore myServer.jks -storepass 123456
keytool -exportcert -rfc -file myServer.pem.cer -alias myServer -keystore myServer.jks -storepass 123456

客户端
keytool -genkeypair -alias myClient -keyalg RSA -keysize 1024 -sigalg SHA1withRSA -dname "CN=myClient, OU=R & D department, O=\"BJ SOS Software Tech Co., Ltd\", L=Beijing, S=Beijing, C=CN" -validity 3650 -keypass 123456 -keystore myClient.jks -storepass 123456
keytool -exportcert -rfc -file myClient.pem.cer -alias myClient -keystore myClient.jks -storepass 123456
keytool -importkeystore -srcstoretype JKS -srckeystore myClient.jks -srcstorepass 123456 -srcalias myClient -srckeypass 123456 -deststoretype PKCS12 -destkeystore myClient.p12 -deststorepass 123456 -destalias myClient -destkeypass 123456 -noprompt

Spring WS 部分问题参考
  加密后无法找到Endpoint
  https://jira.springsource.org/browse/SWS-701

  动态生成的WSDL中的soapAction属性为空
  http://forum.springsource.org/showthread.php?34998-soapAction-attribute-of-operation-when-dynamically-generating-wsdl

本工程现状
  1. 可以使用Spring-WS的Java客户端调用其实现的WebServic
      客户端通过用户名密码认证、通过服务器端公钥+随机对称加密进行加密。
  2. C# 客户端可以连接未加密、未签名的Java服务。如果加密、签名，则会出错。
      C# 使用WSE3.0 发送的消息会将<SOAP-ENV:Header>的<wsse:UsernameToken> 进行加密并进行摘要算法，而Java服务器端上不能完成此验证，返回的错误消息是：
    <SOAP-ENV:Fault>
      <faultcode>SOAP-ENV:Client</faultcode>
      <faultstring xml:lang="en">The signature or decryption was invalid; nested exception is org.apache.ws.security.WSSecurityException: The signature or decryption was invalid</faultstring>
    </SOAP-ENV:Fault>

